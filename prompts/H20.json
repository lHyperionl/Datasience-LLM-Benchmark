{
  "prompt": "Write Python code for classification and feature engineering to predict 'high_daily_death_increase' events using synthetic_covid19_data.csv. A 'high_daily_death_increase' is defined as a day where 'new_deaths' for a 'location' is in the top 10% of its own historical 'new_deaths' (excluding days with zero new deaths). The code should: 1) Load data, parse 'date'. 2) For each 'location', determine its 90th percentile for 'new_deaths' (where new_deaths > 0) and create the binary target variable. 3) Engineer features: rolling 7-day averages and standard deviations for 'new_cases', 'hosp_patients', 'icu_patients'; lag features (1, 3, 7 days) for 'new_cases' and 'reproduction_rate'; 'days_since_first_case' for each location. 4) Handle missing values from feature engineering (e.g., fill with 0 or backfill). 5) Select features for modeling: engineered features, 'stringency_index', 'people_fully_vaccinated' / 'population', 'median_age', 'gdp_per_capita', 'diabetes_prevalence'. 6) Encode 'continent' (one-hot). Scale numerical features. 7) Train an XGBoost classifier. Perform hyperparameter tuning using GridSearchCV for 'n_estimators', 'max_depth', 'learning_rate'. 8) Evaluate using ROC-AUC and F1-score on a time-based split (e.g., last 20% of data for testing). 9) Use SHAP to explain feature importance for the top 10 features. Include proper imports. Provide only Python code.",
  "difficulty": "hard",
  "category": "Classification",
  "dataset_reference": "synthetic_covid19_data.csv",
  "evaluation_criteria": "Code should define target variable based on percentile, engineer temporal features, train XGBoost with hyperparameter tuning, evaluate with ROC-AUC/F1, and use SHAP for feature importance."
}
